using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using LlmTornado.Caching;
using LlmTornado.Common;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace LlmTornado.Chat.Vendors.Google;

/// <summary>
/// Chat features supported only by Google.
/// </summary>
public class ChatRequestVendorGoogleExtensions
{
    /// <summary>
    /// The name of the content cached to use as context to serve the prediction. Format: cachedContents/{cachedContent}
    /// </summary>
    [JsonProperty("cachedContent")]
    public string? CachedContent { get; set; }
    
    [JsonIgnore]
    internal CachedContentInformation? CachedContentInformation { get; set; }
    
    /// <summary>
    /// Forces given response schema. Normally, use strict functions to automatically set this. Manually setting this is required for cached functions.
    /// </summary>
    [JsonIgnore]
    public Tool? ResponseSchema { get; set; }
    
    /// <summary>
    /// The speech generation config.
    /// </summary>
    [JsonIgnore]
    public ChatRequestVendorGoogleSpeechConfig? SpeechConfig { get; set; }
    
    /// <summary>
    /// The safety filters. Tornado defaults to minimal filers.
    /// </summary>
    [JsonIgnore]
    public ChatRequestVendorGoogleSafetyFilters? SafetyFilters { get; set; }
    
    /// <summary>
    /// Whether to include thoughts - applies only to reasoning models. Tornado sets this to "true" when null.
    /// </summary>
    [JsonIgnore]
    public bool? IncludeThoughts { get; set; }
    
    /// <summary>
    /// Tool to support URL context retrieval.
    /// </summary>
    [JsonIgnore]
    public ChatRequestVendorGoogleUrlContext? UrlContext { get; set; }
    
    /// <summary>
    /// GoogleSearch tool type. Tool to support Google Search in Model. Powered by Google.
    /// </summary>
    [JsonIgnore]
    public ChatRequestVendorGoogleSearch? GoogleSearch { get; set; }
    
    /// <summary>
    /// Retrieval tool that is powered by Google search.
    /// </summary>
    [JsonIgnore]
    public ChatRequestVendorGoogleSearchRetrieval? GoogleSearchRetrieval { get; set; }
    
    /// <summary>
    /// Enables the model to execute code as part of generation.
    /// </summary>
    [JsonIgnore]
    public ChatRequestVendorGoogleCodeExecution? CodeExecution { get; set; }

    /// <summary>
    /// Computer Use environment configuration for browser automation.
    /// </summary>
    [JsonIgnore]
    public ChatRequestVendorGoogleComputerUse? ComputerUse { get; set; }
    
    /// <summary>
    /// Empty Google extensions.
    /// </summary>
    public ChatRequestVendorGoogleExtensions()
    {
        
    }

    /// <summary>
    /// Cached content will be used for responses.
    /// </summary>
    /// <param name="cachedContent"></param>
    public ChatRequestVendorGoogleExtensions(string cachedContent)
    {
        CachedContent = cachedContent;
    }
    
    /// <summary>
    /// Cached content will be used for responses.
    /// </summary>
    /// <param name="cachedContent"></param>
    public ChatRequestVendorGoogleExtensions(CachedContentInformation cachedContent)
    {
        CachedContent = cachedContent.Name;
        CachedContentInformation = cachedContent;
    }
}

/// <summary>
/// Tool that executes code generated by the model, and automatically returns the result to the model.
/// </summary>
public class ChatRequestVendorGoogleCodeExecution
{
    internal ChatRequestVendorGoogleCodeExecution()
    {

    }

    /// <summary>
    /// An instance of the tool.
    /// </summary>
    public static readonly ChatRequestVendorGoogleCodeExecution Inst = new ChatRequestVendorGoogleCodeExecution();
}

/// <summary>
/// Computer Use configuration for browser automation.
/// </summary>
public class ChatRequestVendorGoogleComputerUse
{
    /// <summary>
    /// The environment for Computer Use.
    /// </summary>
    [JsonProperty("environment")]
    public ChatRequestVendorGoogleComputerUseEnvironment Environment { get; set; } = ChatRequestVendorGoogleComputerUseEnvironment.Browser;

    /// <summary>
    /// Optional list of predefined functions to exclude from Computer Use.
    /// </summary>
    [JsonProperty("excludedPredefinedFunctions")]
    public List<ChatRequestVendorGoogleComputerUsePredefinedFunctions>? ExcludedPredefinedFunctions { get; set; }

    /// <summary>
    /// Creates a Computer Use configuration for browser automation.
    /// </summary>
    public ChatRequestVendorGoogleComputerUse()
    {

    }

    /// <summary>
    /// Creates a Computer Use configuration with excluded functions.
    /// </summary>
    /// <param name="excludedFunctions">Functions to exclude like "drag_and_drop", "key_combination", etc.</param>
    public ChatRequestVendorGoogleComputerUse(params ChatRequestVendorGoogleComputerUsePredefinedFunctions[] excludedFunctions)
    {
        ExcludedPredefinedFunctions = excludedFunctions.ToList();
    }

    /// <summary>
    /// A public instance of the Computer Use tool for browser automation.
    /// </summary>
    public static readonly ChatRequestVendorGoogleComputerUse Browser = new ChatRequestVendorGoogleComputerUse();
}

/// <summary>
/// Supported environments for Computer Use.
/// </summary>
[JsonConverter(typeof(StringEnumConverter))]
public enum ChatRequestVendorGoogleComputerUseEnvironment
{
    /// <summary>
    /// Browser environment for web automation.
    /// </summary>
    [EnumMember(Value = "ENVIRONMENT_BROWSER")]
    Browser
}

/// <summary>
/// Predefined functions that can be excluded from Computer Use.
/// </summary>
[JsonConverter(typeof(StringEnumConverter))]
public enum ChatRequestVendorGoogleComputerUsePredefinedFunctions
{
    /// <summary>
    /// Opens the web browser.
    /// </summary>
    [EnumMember(Value = "open_web_browser")]
    OpenWebBrowser,

    /// <summary>
    /// Pauses execution for 5 seconds.
    /// </summary>
    [EnumMember(Value = "wait_5_seconds")]
    Wait5Seconds,

    /// <summary>
    /// Navigates to the previous page.
    /// </summary>
    [EnumMember(Value = "go_back")]
    GoBack,

    /// <summary>
    /// Navigates to the next page.
    /// </summary>
    [EnumMember(Value = "go_forward")]
    GoForward,

    /// <summary>
    /// Navigates to the default search engine.
    /// </summary>
    [EnumMember(Value = "search")]
    Search,

    /// <summary>
    /// Navigates to a specific URL.
    /// </summary>
    [EnumMember(Value = "navigate")]
    Navigate,

    /// <summary>
    /// Clicks at specific coordinates.
    /// </summary>
    [EnumMember(Value = "click_at")]
    ClickAt,

    /// <summary>
    /// Hovers at specific coordinates.
    /// </summary>
    [EnumMember(Value = "hover_at")]
    HoverAt,

    /// <summary>
    /// Types text at specific coordinates.
    /// </summary>
    [EnumMember(Value = "type_text_at")]
    TypeTextAt,

    /// <summary>
    /// Presses keyboard keys or combinations.
    /// </summary>
    [EnumMember(Value = "key_combination")]
    KeyCombination,

    /// <summary>
    /// Scrolls the document in a direction.
    /// </summary>
    [EnumMember(Value = "scroll_document")]
    ScrollDocument,

    /// <summary>
    /// Scrolls at specific coordinates.
    /// </summary>
    [EnumMember(Value = "scroll_at")]
    ScrollAt,

    /// <summary>
    /// Drags and drops from one coordinate to another.
    /// </summary>
    [EnumMember(Value = "drag_and_drop")]
    DragAndDrop
}

/// <summary>
/// Tool to retrieve public web data for grounding, powered by Google.
/// </summary>
public class ChatRequestVendorGoogleSearchRetrieval
{
    /// <summary>
    /// Describes the options to customize dynamic retrieval.
    /// </summary>
    [JsonProperty("dynamicRetrievalConfig")]
    public ChatRequestVendorGoogleSearchRetrievalDynamicRetrievalConfig? DynamicRetrievalConfig { get; set; }
}

/// <summary>
/// Describes the options to customize dynamic retrieval.
/// </summary>
public class ChatRequestVendorGoogleSearchRetrievalDynamicRetrievalConfig
{
    /// <summary>
    /// The mode of the predictor to be used in dynamic retrieval.
    /// </summary>
    [JsonProperty("mode")]
    public ChatRequestVendorGoogleSearchRetrievalDynamicRetrievalConfigModes Mode { get; set; }
    
    /// <summary>
    /// The threshold to be used in dynamic retrieval. If not set, a system default value is used.
    /// </summary>
    [JsonProperty("dynamicThreshold")]
    public double? DynamicThreshold { get; set; }
}

/// <summary>
/// The mode of the predictor to be used in dynamic retrieval.
/// </summary>
[JsonConverter(typeof(StringEnumConverter))]
public enum ChatRequestVendorGoogleSearchRetrievalDynamicRetrievalConfigModes
{
    /// <summary>
    /// Always trigger retrieval.
    /// </summary>
    [EnumMember(Value = "MODE_UNSPECIFIED")]
    Unspecified,
    
    /// <summary>
    /// Run retrieval only when system decides it is necessary.
    /// </summary>
    [EnumMember(Value = "MODE_DYNAMIC")]
    Dynamic
}

/// <summary>
/// GoogleSearch tool type. Tool to support Google Search in Model. Powered by Google.
/// </summary>
public class ChatRequestVendorGoogleSearch
{
    /// <summary>
    /// A public instance of the tool.
    /// </summary>
    public static readonly ChatRequestVendorGoogleSearch Inst = new ChatRequestVendorGoogleSearch();
    
    /// <summary>
    /// Filter search results to a specific time range. If customers set a start time, they must set an end time (and vice versa).
    /// </summary>
    [JsonProperty("timeRangeFilter")]
    public ChatRequestVendorGoogleInterval? TimeRangeFilter { get; set; }
}

/// <summary>
/// Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive).
/// The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time.
/// </summary>
public class ChatRequestVendorGoogleInterval
{
    /// <summary>
    /// Optional. Inclusive start of the interval.
    /// If specified, a Timestamp matching this interval will have to be the same or after the start.
    /// </summary>
    [JsonIgnore]
    public DateTime? StartTime
    {
        get => InternalStartTime is not null ? DateTime.Parse(InternalStartTime) : null;
        set => InternalStartTime = value?.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
    }

    [JsonProperty("startTime")] 
    internal string? InternalStartTime { get; set; }
    
    /// <summary>
    /// Optional. Exclusive end of the interval.
    /// If specified, a Timestamp matching this interval will have to be before the end.
    /// </summary>
    [JsonIgnore]
    public DateTime? EndTime
    {
        get => InternalEndTime is not null ? DateTime.Parse(InternalEndTime) : null;
        set => InternalEndTime = value?.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
    }

    [JsonProperty("endTime")] 
    internal string? InternalEndTime { get; set; }

    /// <summary>
    /// Represents a time interval.
    /// </summary>
    public ChatRequestVendorGoogleInterval()
    {
        
    }

    /// <summary>
    /// Represents a time interval.
    /// </summary>
    /// <param name="startTime">Inclusive start of the interval.</param>
    /// <param name="endTime">Exclusive end of the interval.</param>
    public ChatRequestVendorGoogleInterval(DateTime? startTime, DateTime? endTime)
    {
        StartTime = startTime;
        EndTime = endTime;
    }
}

/// <summary>
/// URL context tool.
/// </summary>
public class ChatRequestVendorGoogleUrlContext
{
    internal ChatRequestVendorGoogleUrlContext()
    {
        
    }

    /// <summary>
    /// A public instance of the tool.
    /// </summary>
    public static readonly ChatRequestVendorGoogleUrlContext Inst = new ChatRequestVendorGoogleUrlContext();
}

/// <summary>
/// Safety filters
/// </summary>
public class ChatRequestVendorGoogleSafetyFilters
{
    /// <summary>
    /// The default filters as set by the provider.
    /// </summary>
    public static readonly ChatRequestVendorGoogleSafetyFilters Default = new ChatRequestVendorGoogleSafetyFilters
    {
        SpecialKind = 2
    };

    /// <summary>
    /// The default filters used by Tornado.
    /// </summary>
    public static readonly ChatRequestVendorGoogleSafetyFilters Minimal = new ChatRequestVendorGoogleSafetyFilters
    {
        SpecialKind = 1
    };
    
    /// <summary>
    /// HARM_CATEGORY_HARASSMENT
    /// </summary>
    public GoogleSafetyFilterTypes? Harassment { get; set; }
    
    /// <summary>
    /// HARM_CATEGORY_HATE_SPEECH
    /// </summary>
    public GoogleSafetyFilterTypes? HateSpeech { get; set; }
    
    /// <summary>
    /// HARM_CATEGORY_SEXUALLY_EXPLICIT
    /// </summary>
    public GoogleSafetyFilterTypes? SexuallyExplicit { get; set; }
    
    /// <summary>
    /// HARM_CATEGORY_DANGEROUS_CONTENT
    /// </summary>
    public GoogleSafetyFilterTypes? DangerousContent { get; set; }
    
    [JsonIgnore]
    internal int SpecialKind { get; set; }
}

/// <summary>
/// Safety filter types.
/// </summary>
[JsonConverter(typeof(StringEnumConverter))]
public enum GoogleSafetyFilterTypes
{
    /// <summary>
    /// Always show regardless of probability of unsafe content
    /// </summary>
    [EnumMember(Value = "BLOCK_NONE")] 
    BlockNone,
    
    /// <summary>
    /// Block when high probability of unsafe content
    /// </summary>
    [EnumMember(Value = "BLOCK_ONLY_HIGH")] 
    BlockFew,
    
    /// <summary>
    /// Block when medium or high probability of unsafe content
    /// </summary>
    [EnumMember(Value = "BLOCK_MEDIUM_AND_ABOVE")] 
    BlockSome,
    
    /// <summary>
    /// Block when low, medium or high probability of unsafe content
    /// </summary>
    [EnumMember(Value = "BLOCK_LOW_AND_ABOVE")] 
    BlockMost,
    
    /// <summary>
    /// Threshold is unspecified, block using default threshold
    /// </summary>
    [EnumMember(Value = "HARM_BLOCK_THRESHOLD_UNSPECIFIED")] 
    Default
}

/// <summary>
/// Configuration of speech.
/// </summary>
public class ChatRequestVendorGoogleSpeechConfig
{
    /// <summary>
    /// The name of the preset voice to use for single-speaker output.
    /// </summary>
    public ChatRequestVendorGoogleSpeechConfigPrebuiltVoice? VoiceName { get; set; }
    
    /// <summary>
    /// One of: de-DE, en-AU, en-GB, en-IN, en-US, es-US, fr-FR<br/>
    /// hi-IN, pt-BR, ar-XA, es-ES, fr-CA, id-ID, it-IT<br/>
    /// ja-JP, tr-TR, vi-VN, bn-IN, gu-IN, kn-IN, ml-IN<br/>
    /// mr-IN, ta-IN, te-IN, nl-NL, ko-KR, cmn-CN, pl-PL, ru-RU, and th-TH.
    /// </summary>
    public string? LanguageCode { get; set; }
    
    public ChatRequestVendorGoogleSpeechConfigMultiSpeaker? MultiSpeaker { get; set; }
}

/// <summary>
/// Configuration for multiple speakers.
/// </summary>
public class ChatRequestVendorGoogleSpeechConfigMultiSpeaker
{
    public List<ChatRequestVendorGoogleSpeechConfigMultiSpeakerSpeaker> Speakers { get; set; } = [];
}

/// <summary>
/// Configuration of a speaker.
/// </summary>
public class ChatRequestVendorGoogleSpeechConfigMultiSpeakerSpeaker
{
    /// <summary>
    /// Handle of the speaker, this must be referenced in the script to read.
    /// </summary>
    public string Speaker { get; set; }
    
    public ChatRequestVendorGoogleSpeechConfigPrebuiltVoice? Voice { get; set; }

    /// <summary>
    /// Creates a new configuration for a speaker.
    /// </summary>
    /// <param name="speaker"></param>
    public ChatRequestVendorGoogleSpeechConfigMultiSpeakerSpeaker(string speaker)
    {
        Speaker = speaker;
    }
    
    /// <summary>
    /// Creates a new configuration for a speaker.
    /// </summary>
    /// <param name="speaker"></param>
    /// <param name="voice"></param>
    public ChatRequestVendorGoogleSpeechConfigMultiSpeakerSpeaker(string speaker, ChatRequestVendorGoogleSpeakerVoices voice)
    {
        Speaker = speaker;
        Voice = new ChatRequestVendorGoogleSpeechConfigPrebuiltVoice
        {
            VoiceName = voice
        };
    }
}

/// <summary>
/// 
/// </summary>
public class ChatRequestVendorGoogleSpeechConfigPrebuiltVoice
{
    /// <summary>
    /// The name of the preset voice to use.
    /// </summary>
    public ChatRequestVendorGoogleSpeakerVoices? VoiceName { get; set; }
}

/// <summary>
/// Represents the available speaker voices.
/// </summary>
public enum ChatRequestVendorGoogleSpeakerVoices
{
    /// <summary>
    /// Bright
    /// </summary>
    Zephyr,

    /// <summary>
    /// Upbeat
    /// </summary>
    Puck,

    /// <summary>
    /// Informative
    /// </summary>
    Charon,

    /// <summary>
    /// Firm
    /// </summary>
    Kore,

    /// <summary>
    /// Excitable
    /// </summary>
    Fenrir,

    /// <summary>
    /// Youthful
    /// </summary>
    Leda,

    /// <summary>
    /// Firm
    /// </summary>
    Orus,

    /// <summary>
    /// Breezy
    /// </summary>
    Aoede,

    /// <summary>
    /// Easy-going
    /// </summary>
    Callirrhoe,

    /// <summary>
    /// Bright
    /// </summary>
    Autonoe,

    /// <summary>
    /// Breathy
    /// </summary>
    Enceladus,

    /// <summary>
    /// Clear
    /// </summary>
    Iapetus,

    /// <summary>
    /// Easy-going
    /// </summary>
    Umbriel,

    /// <summary>
    /// Smooth
    /// </summary>
    Algieba,

    /// <summary>
    /// Smooth
    /// </summary>
    Despina,

    /// <summary>
    /// Clear
    /// </summary>
    Erinome,

    /// <summary>
    /// Gravelly
    /// </summary>
    Algenib,

    /// <summary>
    /// Informative
    /// </summary>
    Rasalgethi,

    /// <summary>
    /// Upbeat
    /// </summary>
    Laomedeia,

    /// <summary>
    /// Soft
    /// </summary>
    Achernar,

    /// <summary>
    /// Firm
    /// </summary>
    Alnilam,

    /// <summary>
    /// Even
    /// </summary>
    Schedar,

    /// <summary>
    /// Mature
    /// </summary>
    Gacrux,

    /// <summary>
    /// Forward
    /// </summary>
    Pulcherrima,

    /// <summary>
    /// Friendly
    /// </summary>
    Achird,

    /// <summary>
    /// Casual
    /// </summary>
    Zubenelgenubi,

    /// <summary>
    /// Gentle
    /// </summary>
    Vindemiatrix,

    /// <summary>
    /// Lively
    /// </summary>
    Sadachbia,

    /// <summary>
    /// Knowledgeable
    /// </summary>
    Sadaltager,

    /// <summary>
    /// Warm
    /// </summary>
    Sulafat
}
